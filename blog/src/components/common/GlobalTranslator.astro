---
// Composant global pour la traduction automatique de TOUTE la page
---

<div id="global-translator" class="hidden">
  <!-- Ce composant est invisible mais g√®re la traduction globale -->
</div>



<script>
  // Fonction GLOBALE pour traduire TOUT le contenu de la page
  window.translateEntirePage = async function(targetLang) {
    console.log('üåç GLOBAL TRANSLATION STARTING to:', targetLang);
    
    if (targetLang === 'fr') {
      // Si c'est le fran√ßais, restaurer le texte original
      restoreOriginalText();
      return;
    }

    // Traduire TOUS les textes de la page, pas seulement data-translate
    await translateAllTexts(targetLang);
  };

  // Fonction pour traduire du contenu HTML en pr√©servant la structure
  async function translateHTMLContent(originalHTML, translatedText, originalText) {
    // Approche plus intelligente : analyser la structure HTML et traduire intelligemment
    
    // Cr√©er un √©l√©ment temporaire pour analyser la structure
    const tempDiv = document.createElement('div');
    tempDiv.innerHTML = originalHTML;
    
    // Si l'√©l√©ment n'a que du texte simple, retourner directement la traduction
    if (tempDiv.children.length === 0) {
      return translatedText;
    }
    
    // Si l'√©l√©ment contient des balises HTML, pr√©server la structure
    // Utiliser une approche plus intelligente pour g√©rer les balises imbriqu√©es
    try {
      // Cr√©er un clone pour manipulation
      const clone = tempDiv.cloneNode(true);
      
      // Fonction r√©cursive pour traduire le contenu des n≈ìuds de texte
      function translateTextNodes(element) {
        const walker = document.createTreeWalker(
          element,
          NodeFilter.SHOW_TEXT,
          null,
          false
        );
        
        let textNode;
        while (textNode = walker.nextNode()) {
          const nodeText = textNode.textContent.trim();
          if (nodeText && nodeText.length > 0) {
            // Si ce n≈ìud contient le texte original, le remplacer
            if (nodeText.includes(originalText)) {
              textNode.textContent = nodeText.replace(originalText, translatedText);
            }
            // Ne pas traduire mot par mot pour √©viter les m√©langes de langues
            // Attendre que le texte complet soit traduit par la fonction principale
          }
        }
      }
      
      // Traduire tous les n≈ìuds de texte dans le clone
      translateTextNodes(clone);
      
      // Retourner le HTML modifi√©
      return clone.innerHTML;
      
    } catch (error) {
      console.error('‚ùå Error in translateHTMLContent:', error);
      // Fallback : remplacer le texte principal tout en pr√©servant les balises
      return originalHTML.replace(originalText, translatedText);
    }
  }

  // Fonction pour traduire sp√©cifiquement les √©l√©ments avec data-translate
  async function translateDataTranslateElements(targetLang) {
    const dataTranslateElements = document.querySelectorAll('[data-translate]');
    console.log(`üéØ Found ${dataTranslateElements.length} data-translate elements`);
    
    for (const element of dataTranslateElements) {
      if (element.hasAttribute('data-translated')) {
        continue; // D√©j√† traduit
      }
      
      const originalText = element.textContent.trim();
      
      if (originalText.length < 3) {
        continue;
      }
      
      try {
        // Sauvegarder le contenu original (HTML complet)
        const originalHTML = element.innerHTML;
        element.setAttribute('data-original-content', originalHTML);
        element.setAttribute('data-translated', 'true');
        
        // Afficher "Traduction..." pendant la traduction
        element.innerHTML = '<span class="text-blue-400 italic">üîÑ</span>';
        
        // Traduire le texte
        const translatedText = await translateText(originalText, 'fr', targetLang);
        
        // Restaurer la structure HTML avec le texte traduit
        let translatedHTML = originalHTML;
        
        // Si l'√©l√©ment contient des balises HTML, pr√©server la structure
        if (element.children.length > 0 || originalHTML.includes('<')) {
          // Remplacer le texte complet en pr√©servant la structure HTML
          // Utiliser une approche plus s√ªre pour √©viter les remplacements partiels
          const regex = new RegExp(originalText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
          translatedHTML = originalHTML.replace(regex, translatedText);
        }
        
        // Afficher le contenu traduit
        element.innerHTML = translatedHTML;
        
        console.log(`‚úÖ Translated data-translate: "${originalText}" ‚Üí "${translatedText}"`);
        
      } catch (error) {
        console.error('‚ùå Translation error for data-translate:', originalText, error);
        // Restaurer le texte original en cas d'erreur
        element.innerHTML = originalText;
        element.removeAttribute('data-translated');
      }
    }
  }

  // Fonction pour nettoyer les textes d√©j√† partiellement traduits
  async function cleanupMixedLanguageText() {
    console.log('üßπ Cleaning up mixed language text...');
    
    // Mots fran√ßais qui ne devraient pas √™tre traduits individuellement
    const frenchWords = [
      'l\'univers', 'fascinant', 'exploration', '√©rotique', 'bien-√™tre', 'sexuel',
      'articles', '√©ducatifs', 'guides', 'pratiques', 't√©moignages', 'authentiques',
      'contenu', 'explicite', 'destin√©', 'adultes', 'devez', 'avoir', 'ans', 'plus',
      'acc√©der', 'ce', 'blog', 'contient', 'du', 'de', '√†', 'pour', 'et', 'avec',
      'dans', 'sur', 'par', 'les', 'des', 'une', 'un', 'est', 'sont', '√™tre'
    ];
    
    // Chercher et corriger les textes partiellement traduits
    const elements = document.querySelectorAll('*');
    for (const element of elements) {
      if (element.hasAttribute('data-translated')) continue;
      
      const elementText = element.textContent.trim();
      if (elementText && elementText.length > 10) {
        // V√©rifier si le texte contient des mots fran√ßais m√©lang√©s avec de l'anglais
        let hasMixedLanguage = false;
        let correctedText = elementText;
        
        for (const frenchWord of frenchWords) {
          if (elementText.includes(frenchWord)) {
            hasMixedLanguage = true;
            break;
          }
        }
        
        // Si on trouve du texte m√©lang√©, essayer de le corriger
        if (hasMixedLanguage) {
          console.log(`üßπ Found mixed language text: "${elementText}"`);
          
          // Essayer de restaurer le texte fran√ßais original
          const originalText = element.getAttribute('data-original-content');
          if (originalText) {
            element.innerHTML = originalText;
            element.removeAttribute('data-translated');
            console.log(`‚úÖ Restored original French text`);
          }
        }
      }
    }
    
    console.log('üßπ Finished cleaning up mixed language text');
  }

  // Fonction pour FORCER la traduction des textes probl√©matiques sp√©cifiques
  async function forceTranslateProblematicContent(targetLang) {
    console.log('üéØ FORCING translation of problematic content...');
    
    // D'abord, nettoyer les textes d√©j√† partiellement traduits
    await cleanupMixedLanguageText();
    
    // Liste des textes probl√©matiques √† traduire absolument
    const problematicTexts = [
      "Explorez l'univers fascinant de l'exploration √©rotique et du bien-√™tre sexuel √† travers des articles √©ducatifs, des guides pratiques et des t√©moignages authentiques",
      "Ce blog contient du contenu explicite destin√© aux adultes. Vous devez avoir 18 ans ou plus pour acc√©der √† ce contenu",
      "Recevez nos meilleurs articles directement dans votre bo√Æte mail",
      "En vous abonnant, vous acceptez notre",
      "√Ä propos de Mad2Moi Blog",
      "Nous sommes d√©di√©s √† l'√©ducation √©rotique, √† l'exploration des plaisirs et √† la promotion d'une sexualit√© √©panouie et responsable",
      "Commencez votre voyage d'exploration √©rotique avec nos articles √©ducatifs et nos guides pratiques",
      "Rappel important : Ce blog est destin√© aux adultes de 18 ans et plus. Toutes nos recommandations supposent des partenaires consentants et des pratiques s√©curis√©es",
      "Contactez Mad2Moi Blog",
      "J'accepte que mes donn√©es soient trait√©es conform√©ment √† la",
      "Cat√©gories Mad2Moi",
      // Ajout de variantes pour capturer les textes partiellement traduits
      "Explorez l'univers fascinating de l'exploration √©rotique et du bien-√™tre sexual √† travers of articles √©ducatifs, of guides practical et of t√©moignages authentic",
      "l'univers fascinating",
      "bien-√™tre sexual",
      "of articles √©ducatifs",
      "of guides practical",
      "of t√©moignages authentic"
    ];
    
    for (const targetText of problematicTexts) {
      try {
        // Chercher TOUS les √©l√©ments qui contiennent ce texte
        const elements = document.querySelectorAll('*');
        
        for (const element of elements) {
          if (element.hasAttribute('data-translated')) continue;
          if (element.hasAttribute('data-original-content')) continue;
          
          const elementText = element.textContent.trim();
          if (elementText.includes(targetText) && elementText.length > 10) {
            console.log(`üéØ Found problematic text: "${targetText}" in element:`, element);
            
            // Sauvegarder le contenu original
            const originalHTML = element.innerHTML;
            element.setAttribute('data-original-content', originalHTML);
            element.setAttribute('data-translated', 'true');
            
            // Traduire le texte complet
            const translatedText = await translateText(elementText, 'fr', targetLang);
            
            // Remplacer le contenu en pr√©servant la structure HTML
            if (originalHTML.includes('<')) {
              // Pour les √©l√©ments avec HTML, remplacer le texte complet de mani√®re s√ªre
              const regex = new RegExp(elementText.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g');
              const translatedHTML = originalHTML.replace(regex, translatedText);
              element.innerHTML = translatedHTML;
            } else {
              // Pour les √©l√©ments sans HTML, remplacer directement
              element.textContent = translatedText;
            }
            
            console.log(`‚úÖ FORCED translation of problematic text: "${elementText}" ‚Üí "${translatedText}"`);
            break; // Traduit ce texte, passer au suivant
          }
        }
      } catch (error) {
        console.error('‚ùå Error forcing translation of problematic text:', targetText, error);
      }
    }
    
    console.log('üéØ Finished forcing translation of problematic content');
  }

  // Fonction pour traduire TOUS les textes de la page
  async function translateAllTexts(targetLang) {
    console.log(`üåç Starting translation to ${targetLang}...`);
    
    // D'abord, traduire les √©l√©ments avec data-translate (priorit√©)
    await translateDataTranslateElements(targetLang);
    
    // FORCER la traduction des textes probl√©matiques sp√©cifiques
    await forceTranslateProblematicContent(targetLang);
    
    // Ensuite, traduire les autres √©l√©ments
    // S√©lecteurs pour tous les types de texte
    const textSelectors = [
      'h1', 'h2', 'h3', 'h4', 'h5', 'h6', // Titres
      'p', 'span', 'div', 'a', 'button', 'label', // Paragraphes, liens, boutons
      'li', 'td', 'th', // Listes et tableaux
      'input[placeholder]', 'textarea[placeholder]', // Placeholders
      'strong', 'em', 'b', 'i', // Texte en gras/italique
      'figcaption', 'caption', // L√©gendes
      'small', 'sub', 'sup' // Texte petit
    ];

    let totalElements = 0;
    let translatedElements = 0;

    // Traduire d'abord les placeholders des inputs
    const inputElements = document.querySelectorAll('input[placeholder], textarea[placeholder]');
    for (const input of inputElements) {
      const placeholder = input.getAttribute('placeholder');
      if (placeholder && placeholder.trim().length > 0) {
        try {
          // Sauvegarder le placeholder original
          if (!input.hasAttribute('data-original-placeholder')) {
            input.setAttribute('data-original-placeholder', placeholder);
          }
          
          // Traduire le placeholder
          const translatedPlaceholder = await translateText(placeholder, 'fr', targetLang);
          input.setAttribute('placeholder', translatedPlaceholder);
          
          translatedElements++;
          console.log(`‚úÖ Translated placeholder: "${placeholder}" ‚Üí "${translatedPlaceholder}"`);
        } catch (error) {
          console.error('‚ùå Placeholder translation error:', error);
        }
      }
    }

    for (const selector of textSelectors) {
      const elements = document.querySelectorAll(selector);
      
      for (const element of elements) {
        // Ignorer les √©l√©ments d√©j√† traduits ou vides
        if (element.hasAttribute('data-translated') || 
            element.hasAttribute('data-original-content') ||
            !element.textContent || 
            element.textContent.trim().length === 0) {
          continue;
        }
        
        // Permettre la traduction d'√©l√©ments avec des enfants simples (span, strong, em, b, i)
        const allowedChildTags = ['span', 'strong', 'em', 'b', 'i'];
        const hasComplexChildren = Array.from(element.children).some(child => 
          !allowedChildTags.includes(child.tagName.toLowerCase())
        );
        
        if (hasComplexChildren) {
          continue;
        }

        // Extraire le texte en pr√©servant la structure pour les √©l√©ments avec data-translate
        let originalText = element.textContent.trim();
        
        // Ignorer les textes trop courts ou qui contiennent des URLs/emails
        if (originalText.length < 3 || 
            originalText.includes('http') || 
            originalText.includes('@') ||
            originalText.includes('+33') ||
            originalText.includes('mad2moi.com') ||
            originalText.includes('localhost')) {
          continue;
        }
        
        // Ignorer les textes qui sont d√©j√† dans la langue cible
        if (isAlreadyInTargetLanguage(originalText, targetLang)) {
          continue;
        }
        
        // Pour les √©l√©ments avec data-translate, v√©rifier que le texte est vraiment en fran√ßais
        if (element.hasAttribute('data-translate')) {
          // V√©rifier que le texte contient des mots fran√ßais typiques
          const frenchWords = ['le', 'la', 'les', 'de', 'du', 'des', 'et', 'ou', 'avec', 'pour', 'sur', 'dans', 'est', 'sont', 'avoir', '√™tre'];
          const hasFrenchWords = frenchWords.some(word => 
            originalText.toLowerCase().includes(word)
          );
          
          if (!hasFrenchWords) {
            console.log(`‚ö†Ô∏è Skipping non-French text: "${originalText}"`);
            continue;
          }
        }

        try {
          totalElements++;
          
          // Sauvegarder le contenu original (HTML complet)
          const originalHTML = element.innerHTML;
          element.setAttribute('data-original-content', originalHTML);
          element.setAttribute('data-translated', 'true');
          
          // Afficher "Traduction..." pendant la traduction
          element.innerHTML = '<span class="text-blue-400 italic">üîÑ</span>';
          
          // Traduire le texte
          const translatedText = await translateText(originalText, 'fr', targetLang);
          
          // Restaurer la structure HTML avec le texte traduit
          let translatedHTML = originalHTML;
          
          // Remplacer le contenu textuel tout en pr√©servant les balises HTML
          if (element.children.length > 0) {
            // Si l'√©l√©ment contient des balises HTML, remplacer intelligemment
            translatedHTML = await translateHTMLContent(originalHTML, translatedText, originalText);
          } else {
            // Si pas de balises HTML, remplacer directement
            translatedHTML = translatedText;
          }
          
          // Afficher le contenu traduit
          element.innerHTML = translatedHTML;
          
          translatedElements++;
          console.log(`‚úÖ Translated: "${originalText}" ‚Üí "${translatedText}"`);
          
        } catch (error) {
          console.error('‚ùå Translation error for:', originalText, error);
          // Restaurer le texte original en cas d'erreur
          element.innerHTML = originalText;
          element.removeAttribute('data-translated');
        }
      }
    }

    console.log(`üéØ GLOBAL TRANSLATION COMPLETE: ${translatedElements}/${totalElements} elements translated`);
  }

  // Fonction pour d√©tecter si le texte est d√©j√† dans la langue cible
  function isAlreadyInTargetLanguage(text, targetLang) {
    // Logique am√©lior√©e pour d√©tecter la langue
    const frenchWords = ['le', 'la', 'les', 'de', 'du', 'des', 'et', 'ou', 'avec', 'pour', 'sur', 'dans', 'est', 'sont', 'avoir', '√™tre', 'ce', 'cette', 'ces', 'qui', 'que', 'quoi', 'o√π', 'quand', 'comment', 'pourquoi'];
    const englishWords = ['the', 'and', 'or', 'with', 'for', 'on', 'in', 'at', 'to', 'of', 'a', 'an', 'is', 'are', 'have', 'has', 'this', 'that', 'these', 'those', 'who', 'what', 'where', 'when', 'how', 'why'];
    const germanWords = ['der', 'die', 'das', 'und', 'oder', 'mit', 'f√ºr', 'auf', 'in', 'an', 'zu', 'von', 'ist', 'sind', 'haben', 'hat', 'dieser', 'diese', 'dieses', 'wer', 'was', 'wo', 'wann', 'wie', 'warum'];
    
    const words = text.toLowerCase().split(/\s+/);
    let frenchCount = 0;
    let englishCount = 0;
    let germanCount = 0;
    
    words.forEach(word => {
      // Nettoyer le mot (enlever la ponctuation)
      const cleanWord = word.replace(/[^\w]/g, '');
      if (cleanWord.length < 2) return; // Ignorer les mots trop courts
      
      if (frenchWords.includes(cleanWord)) frenchCount++;
      if (englishWords.includes(cleanWord)) englishCount++;
      if (germanWords.includes(cleanWord)) germanCount++;
    });
    
    // Seuil plus strict pour √©viter les faux positifs
    if (targetLang === 'en' && englishCount >= 2 && englishCount > frenchCount) return true;
    if (targetLang === 'de' && germanCount >= 2 && germanCount > frenchCount) return true;
    
    return false;
  }

  // Fonction de traduction avec Google Translate (plus fiable)
  async function translateText(text, sourceLang, targetLang) {
    try {
      // Utiliser l'API Google Translate gratuite
      const url = `https://translate.googleapis.com/translate_a/single?client=gtx&sl=${sourceLang}&tl=${targetLang}&dt=t&q=${encodeURIComponent(text)}`;
      
      const response = await fetch(url);
      const data = await response.json();
      
      // Extraire le texte traduit
      let translatedText = '';
      if (data && data[0] && data[0][0]) {
        translatedText = data[0][0][0];
      }
      
      return translatedText || text;
      
    } catch (error) {
      console.error('Google Translate error:', error);
      
      // Fallback : utiliser LibreTranslate
      try {
        const response = await fetch('https://libretranslate.com/translate', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            q: text,
            source: sourceLang,
            target: targetLang,
            format: 'text'
          })
        });
        
        if (response.ok) {
          const data = await response.json();
          return data.translatedText || text;
        }
      } catch (fallbackError) {
        console.error('LibreTranslate fallback also failed:', fallbackError);
      }
      
      // Retourner le texte original si tout √©choue
      return text;
    }
  }

  // Fonction pour restaurer le texte original
  window.restoreOriginalText = function() {
    console.log('üîÑ Restoring ALL original text');
    
    // Restaurer les placeholders des inputs
    const inputsWithOriginalPlaceholder = document.querySelectorAll('[data-original-placeholder]');
    inputsWithOriginalPlaceholder.forEach(input => {
      const originalPlaceholder = input.getAttribute('data-original-placeholder');
      if (originalPlaceholder) {
        input.setAttribute('placeholder', originalPlaceholder);
        input.removeAttribute('data-original-placeholder');
      }
    });
    
    // Restaurer le contenu des autres √©l√©ments
    const elementsWithOriginal = document.querySelectorAll('[data-original-content]');
    elementsWithOriginal.forEach(element => {
      const originalContent = element.getAttribute('data-original-content');
      if (originalContent) {
        element.innerHTML = originalContent;
        element.removeAttribute('data-original-content');
        element.removeAttribute('data-translated');
      }
    });
    
    console.log(`üîÑ Restored ${elementsWithOriginal.length} elements and ${inputsWithOriginalPlaceholder.length} placeholders to French`);
  };

  // Initialiser le syst√®me de traduction globale
  document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ GLOBAL TRANSLATOR initialized - Will translate ALL text on the page');
    
    // R√©cup√©rer la langue s√©lectionn√©e
    const selectedLang = localStorage.getItem('selectedLanguage');
    
    if (selectedLang && selectedLang !== 'fr') {
      // Traduire automatiquement la page si ce n'est pas le fran√ßais
      console.log('üîÑ Auto-translating page to:', selectedLang);
      
      // D√©lai pour laisser la page se charger compl√®tement
      setTimeout(() => {
        window.translateEntirePage(selectedLang);
      }, 1000);
    }
  });

  // √âcouter les changements de langue
  window.addEventListener('languageChanged', (event) => {
    const newLang = event.detail.language;
    console.log('üåç Language changed to:', newLang);
    
    // Sauvegarder la nouvelle langue dans localStorage
    localStorage.setItem('selectedLanguage', newLang);
    
    if (newLang === 'fr') {
      // Si c'est le fran√ßais, restaurer le texte original
      console.log('üîÑ Restoring French text...');
      restoreOriginalText();
    } else {
      // Pour les autres langues, traduire directement
      console.log('üîÑ Translating page to:', newLang);
      window.translateEntirePage(newLang);
    }
  });
</script>

<style>
  /* Styles pour les √©l√©ments en cours de traduction */
  .text-blue-400 {
    color: #60a5fa;
  }
  
  .italic {
    font-style: italic;
  }
</style>
